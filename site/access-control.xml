<?xml-stylesheet type="text/xml" href="page.xsl"?>
<!--
Copyright (c) 2007-2019 Pivotal Software, Inc.

All rights reserved. This program and the accompanying materials
are made available under the terms of the under the Apache License,
Version 2.0 (the "License”); you may not use this file except in compliance
with the License. You may obtain a copy of the License at

https://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:doc="http://www.rabbitmq.com/namespaces/ad-hoc/doc"
      xmlns:x="http://www.rabbitmq.com/2011/extensions">
  <head>
    <title>Authentication, Authorisation, Access Control</title>
  </head>
  <body>
    <doc:section name="overview">
      <p>
        This document describes <a href="#authentication">authentication</a> and <a href="#authorisation">authorisation</a> features
        in RabbitMQ. Together they allow the operator to control access to the system.
        Different users can be granted access only to specific <a href="/vhosts.html">virtual hosts</a>. Their
        permissions in each virtual hosts also can be limited.
      </p>
      <p>
        RabbitMQ supports two major <a href="#mechanisms">authentication mechanisms</a>
        as well as several <a href="#backends">authentication and authorisation backends</a>.

        <a href="/passwords.html">Password-based</a> authentication has a companion guide.
        A closely related topic of <a href="/ssl.html">TLS support</a> is also covered in a dedicated guide.
      </p>

      <p>
        Other topics discussed in this guide include:

        <ul>
          <li><a href="#default-state">Default virtual host and user</a></li>
          <li><a href="#loopback-users">Connectivity limitations</a> imposed on the default user</li>
          <li>Troubleshooting of <a href="#troubleshooting-authn">authentication</a> and <a href="#troubleshooting-authz">authorisation failures</a></li>
        </ul>
      </p>
    </doc:section>


    <doc:section name="terminology-and-definitions">
      <doc:heading>Terminology and Definitions</doc:heading>
      <p>
        Authentication and authorisation are often confused or used
        interchangeably. That's wrong and in RabbitMQ, the two are
        separated. For the sake of simplicity, we'll define
        authentication as "identifying who the user is" and
        authorisation as "determining what the user is and isn't
        allowed to do."
      </p>
    </doc:section>


    <doc:section name="default-state">
      <doc:heading>Default Virtual Host and User</doc:heading>
      <p>
        When the server first starts running, and detects that its
        database is uninitialised or has been deleted, it
        initialises a fresh database with the following resources:
      </p>

      <ul class="compact">
        <li>
          a virtual host named <code>/</code>
        </li>
        <li>
          a user named <code>guest</code> with a default password of
          <code>guest</code>, granted full access to the
          <code>/</code> virtual host.
        </li>
      </ul>

      <p>
        It is advisable
        to <a href="rabbitmqctl.8.html#delete_user">delete</a>
        the <code>guest</code> user
        or at least <a href="rabbitmqctl.8.html#change_password">change
        its password</a> to reasonably secure generated value that won't be known
        to the public.
      </p>
    </doc:section>


    <doc:section name="authentication">
      <doc:heading>Authentication: Who Do You Say You Are?</doc:heading>

      <p>
        After an application connects to RabbitMQ and before it can perform operations, it must
        authenticate, that is, present and prove its identity. With that identity, RabbitMQ nodes can
        look up its permissions and <a href="#authorisation">authorize</a> access to resources
        such as <a href="/vhosts.html">virtual hosts</a>, queues, exchanges, and so on.
      </p>

      <p>
        Two primary ways of authenticating a client are <a href="/passwords.html">username/password pairs</a>
        and <a href="https://en.wikipedia.org/wiki/X.509">X.509 certificates</a>. Username/password pairs
        can be used with a variety of <a href="#backends">authentication backends</a> that verify the credentials.
      </p>

      <p>
        Connections that fail to authenticate will be closed with an error message in the <a href="/logging.html">server log</a>.

      </p>

      <p>
        To authenticate client connections using X.509 certificate a built-in plugin,
        <a href="https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl">rabbitmq-auth-mechanism-ssl</a>,
        must be enabled and clients must be <a href="#mechanisms">configured to use the EXTERNAL mechanism</a>.
        With this mechanism, any client-provided password will be ignored.
      </p>
    </doc:section>


    <doc:section name="loopback-users">
      <doc:heading>"guest" user can only connect via localhost</doc:heading>
      <p>
        By default, the <code>guest</code> user is prohibited from
        connecting from remote hosts; it can only connect over
        a loopback interface (i.e. <code>localhost</code>). This
        applies to <a href="/connections.html">connectitons regardless of the protocol</a>.
        Any other users will not (by default) be restricted in this way.
      </p>
      <p>
        The recommended way to address this in production systems
        is to create a new user or set of users with the permissions
        to access the necessary virtual hosts. This can be done
        using <a href="/cli.html">CLI tools</a>, <a href="/management.html">HTTP API or definitions import</a>.
      </p>
      <p>
        This is configured via the <code>loopback_users</code> item
        in the <a href="configure.html#configuration-file">
        configuration file</a>.
      </p>
      <p>
        It is possible to allow the <code>guest</code> user to connect
        from a remote host by setting the
        <code>loopback_users</code> configuration to
        <code>none</code>.
      </p>
      <p>
        A minimalistic <a href="/configure.html">RabbitMQ config file</a>
        which allows remote connections for <code>guest</code> looks like so:

<pre class="lang-ini">
# DANGER ZONE!
#
# allowing remote connections for default user is highly discouraged
# as it dramatically decreases the security of the system. Delete the user
# instead and create a new one with generated secure credentials.
loopback_users = none
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config file format</a> (<code>rabbitmq.config</code>):

<pre class="lang-erlang">
%% DANGER ZONE!
%%
%% Allowing remote connections for default user is highly discouraged
%% as it dramatically decreases the security of the system. Delete the user
%% instead and create a new one with generated secure credentials.
[{rabbit, [{loopback_users, []}]}].
</pre>
        </p>
    </doc:section>


    <doc:section name="authorisation">
      <doc:heading>Authrozition: How Permissions Work</doc:heading>
      <p>
        When a RabbitMQ client establishes a connection to a
        server and <a href="#authentication">authenticates</a>, it specifies a virtual host within which it intends
        to operate. A first level of access control is enforced at
        this point, with the server checking whether the user has
        any permissions to access the virtual hosts, and rejecting
        the connection attempt otherwise.
      </p>

      <p>
        Resources, i.e. exchanges and queues, are named entities
        inside a particular virtual host; the same name denotes a
        different resource in each virtual host. A second level of
        access control is enforced when certain operations are
        performed on resources.
      </p>

      <p>
        RabbitMQ distinguishes between <em>configure</em>,
        <em>write</em> and <em>read</em> operations on a
        resource. The <em>configure</em> operations create or
        destroy resources, or alter their behaviour. The
        <em>write</em> operations inject messages into a
        resource. And the <em>read</em> operations retrieve messages
        from a resource.
      </p>

      <p>
        In order to perform an operation on a resource the user must
        have been granted the appropriate permissions for it. The
        following table shows what permissions on what type of
        resource are required for all the AMQP commands which
        perform permission checks.
        <table>
          <tr>
            <th>AMQP 0-9-1 Operation</th>
            <th></th>
            <th>configure</th>
            <th>write</th>
            <th>read</th>
          </tr>
          <tr>
            <td>exchange.declare</td><td>(passive=false)</td><td>exchange</td><td/><td/>
          </tr>
          <tr>
            <td>exchange.declare</td><td>(passive=true)</td><td></td><td/><td/>
          </tr>
          <tr>
            <td>exchange.declare</td><td>(with <a href="ae.html">AE</a>)</td><td>exchange</td><td>exchange (AE)</td><td>exchange</td>
          </tr>
          <tr>
            <td>exchange.delete</td><td/><td>exchange</td><td/><td/>
          </tr>
          <tr>
            <td>queue.declare</td><td>(passive=false)</td><td>queue</td><td/><td/>
          </tr>
          <tr>
            <td>queue.declare</td><td>(passive=true)</td><td></td><td/><td/>
          </tr>
          <tr>
            <td>queue.declare</td><td>(with <a href="dlx.html">DLX</a>)</td><td>queue</td><td>exchange (DLX)</td><td>queue</td>
          </tr>
          <tr>
            <td>queue.delete</td><td/><td>queue</td><td/><td/>
          </tr>
          <tr>
            <td>exchange.bind</td><td/><td/><td>exchange (destination)</td><td>exchange (source)</td>
          </tr>
          <tr>
            <td>exchange.unbind</td><td/><td/><td>exchange (destination)</td><td>exchange (source)</td>
          </tr>
          <tr>
            <td>queue.bind</td><td/><td/><td>queue</td><td>exchange</td>
          </tr>
          <tr>
            <td>queue.unbind</td><td/><td/><td>queue</td><td>exchange</td>
          </tr>
          <tr>
            <td>basic.publish</td><td/><td/><td>exchange</td><td/>
          </tr>
          <tr>
            <td>basic.get</td><td/><td/><td/><td>queue</td>
          </tr>
          <tr>
            <td>basic.consume</td><td/><td/><td/><td>queue</td>
          </tr>
          <tr>
            <td>queue.purge</td><td/><td/><td/><td>queue</td>
          </tr>
        </table>
      </p>

      <p>
        Permissions are expressed as a triple of regular expressions
        - one each for configure, write and read - on per-vhost
        basis. The user is granted the respective permission for
        operations on all resources with names matching the regular
        expressions. <i>(Note: For convenience RabbitMQ maps AMQP's
        default exchange's blank name to 'amq.default' when
        performing permission checks.)</i>
      </p>

      <p>
        The regular expression <code>'^$'</code>, i.e. matching
        nothing but the empty string, covers all resources and
        effectively stops the user from performing any operation.
        Standard AMQP resource names are prefixed with
        <code>amq.</code> and server generated names are prefixed
        with <code>amq.gen</code>.  For example,
        <code>'^(amq\.gen.*|amq\.default)$'</code> gives a user access to
        server-generated names and the default exchange.  The empty
        string, <code>''</code> is a synonym for <code>'^$'</code>
        and restricts permissions in the exact same way.
      </p>

      <p>
        RabbitMQ may cache the results of access control checks on a
        per-connection or per-channel basis. Hence changes to user
        permissions may only take effect when the user reconnects.
      </p>
      <p>
        For details of how to set up access control, please see the
        <a href="rabbitmqctl.8.html#Access_Control">Access Control section</a>
        of the <a href="rabbitmqctl.8.html">rabbitmqctl man page</a>.
      </p>


      <doc:subsection name="user-tags">
        <doc:heading>User Tags and Management UI Access</doc:heading>

        <p>
          In addition to the permissions covered above, users can have tags
          associated with them. Currently only management UI access is  controlled by user tags.
        </p>
        <p>
          The tags are managed using <a href="/rabbitmqctl.8.html#set_user_tags">rabbitmqctl</a>.
          Newly created users do not have any tags set on them by default.
        </p>
        <p>
          Please refer to the <a href="/management.html#permissions">management plugin guide</a> to learn
          more about what tags are supported and how they limit management UI access.
        </p>
      </doc:subsection>
    </doc:section>

    <doc:section name="topic-authorisation">
      <doc:heading>Topic Authorisation</doc:heading>
      <p>
        As of version 3.7.0, RabbitMQ supports topic authorisation for topic exchanges. The routing key of a message
        published to a topic exchange is taken into account when
        publishing authorisation is enforced (e.g. in RabbitMQ default authorisation backend,
        the routing key is matched against a regular expression to decide whether the message can be
        routed downstream or not).
        Topic authorisation targets protocols like STOMP and MQTT, which are structured
        around topics and use topic exchanges under the hood.
      </p>
      <p>
        Topic authorisation is an additional layer on top of
        existing checks for publishers. Publishing a
        message to a topic-typed exchange will go through both the
        <code>basic.publish</code> and the routing key checks.
        The latter is never called if the former refuses access.
      </p>
      <p>
        Topic authorisation can also be enforced for topic consumers.
        Note that it works different for different protocols. The concept
        of topic authorisation only really makes sense for the topic-oriented protocols such as MQTT
        and STOMP. In AMQP 0-9-1, for example, consumers consume from queues
        and thus the standard resource permissions apply. In addition for AMQP 0-9-1,
        binding routing keys between an AMQP 0-9-1 topic exchange and
        a queue/exchange are checked against the topic permissions configured, if any.
        For more information about how RabbitMQ handles authorization for topics, please see
        the <a href="stomp.html">STOMP</a> and <a href="mqtt.html">MQTT</a>
        documentation guides.
      </p>
      <p>
        When default authorisation backend is used, publishing to a
        topic exchange or consuming from a topic is always authorised
        if no topic permissions
        are defined (which is the case on a fresh RabbitMQ
        installation). With this authorisation backend, topic
        authorisation as optional: you don't need to whitelist any
        exchanges. To use topic authorisation therefore you need to opt in
        and define topic permissions for one or more exchanges. For details please see the <a
        href="rabbitmqctl.8.html#Access%20control">Access
        Control section</a> of the <a
        href="rabbitmqctl.8.html">rabbitmqctl man
        page</a>.
      </p>
      <p>
        Internal (default) authorisation backend supports variable expansion
        in permission patterns.
        Three variables are supported: <code>username</code>, <code>vhost</code>,
        and <code>client_id</code>. Note that <code>client_id</code> only
        applies to MQTT. For example, if <code>tonyg</code> is the
        connected user, the permission <code>^{username}-.*</code> is expanded to
        <code>^tonyg-.*</code>
      </p>
      <p>
        If a different authorisation backend (e.g. <a href="ldap.html">LDAP</a>,
        <a href="https://github.com/rabbitmq/rabbitmq-auth-backend-http">HTTP</a>,
        <a href="https://github.com/rabbitmq/rabbitmq-auth-backend-amqp">AMQP</a>) is used, please refer
        to the documentation of those backends.
      </p>
      <p>
        If a custom authorisation backend is used, topic
        authorisation is enforced by implementing the
        <code>check_topic_access</code> callback of the
        <code>rabbit_authz_backend</code> behavior.
      </p>
    </doc:section>

    <doc:section name="backends">
      <doc:heading>Alternative Authentication and Authorisation Backends</doc:heading>

      <p>
        Authentication and authorisation are pluggable. Plugins can provide implementations
        of

        <ul>
          <li>authentication ("authn") backends</li>
          <li>authorisation ("authz") backends</li>
        </ul>

        It is possible for a plugin to provide both.
        For example the internal, <a href="/ldap.html">LDAP</a>
        and <a href="https://github.com/rabbitmq/rabbitmq-auth-backend-http">HTTP</a>
        backends do so.
      </p>

      <p>
        Some plugins, for example, the <a
        href="https://github.com/gotthardp/rabbitmq-auth-backend-ip-range">Source
        IP range one</a>, only provide an authorisation backend. Authentication
        is supposed to be handled by the internal database, LDAP, etc.
      </p>

      <doc:subsection name="combined-backends">
        <doc:heading>Combining Backends</doc:heading>

        <p>
          It is possible to use multiple backends for
          <code>authn</code> or <code>authz</code> using the
          <code>auth_backends</code> configuration key. When
          several authentication backends are used then the first
          positive result returned by a backend in the chain is
          considered to be final. This should not be confused with
          mixed backends (for example, using LDAP for authentication and internal
          backend for authorisation).
        </p>

        <p>
          The following example configures RabbitMQ to use the internal backend
          only (and is the default):
        </p>

<pre class="lang-ini">
# rabbitmq.conf
#
# 1 here is a backend name. It can be anything.
# Since we only really care about backend
# ordering, we use numbers throughout this guide.
#
# "internal" is an alias for rabbit_auth_backend_internal
auth_backends.1 = internal
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [rabbit_auth_backend_internal]}
          ]
}].
</pre>

        <p>
          The example above uses an alias, <code>internal</code> for <code>rabbit_auth_backend_internal</code>.
          The following aliases are available:

          <ul>
            <li><code>internal</code> for <code>rabbit_auth_backend_internal</code></li>
            <li><code>ldap</code> for <code>rabbit_auth_backend_ldap</code> (from the <a href="/ldap.html">LDAP plugin</a>)</li>
            <li><code>http</code> for <code>rabbit_auth_backend_http</code> (from the <a href="https://github.com/rabbitmq/rabbitmq-auth-backend-http">HTTP auth backend plugin</a>)</li>
            <li><code>amqp</code> for <code>rabbit_auth_backend_amqp</code> (from the <a href="https://github.com/rabbitmq/rabbitmq-auth-backend-amqp">AMQP 0-9-1 auth backend plugin</a>)</li>
            <li><code>dummy</code> for <code>rabbit_auth_backend_dummy</code></li>
          </ul>

          When using third party plugins, providing a full module name is necessary.
        </p>

        <p>
          The following example configures RabbitMQ to use the <a href="/ldap.html">LDAP backend</a>
          for both authentication and authorisation. Internal database will not be consulted:
        </p>

<pre class="lang-ini">
auth_backends.1 = ldap
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [rabbit_auth_backend_ldap]}
          ]
}].
</pre>

    <p>
      This will check LDAP first, and then fall back to the internal
      database if the user cannot be authenticated through LDAP:
    </p>

<pre class="lang-ini">
auth_backends.1 = ldap
auth_backends.2 = internal
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [rabbit_auth_backend_ldap, rabbit_auth_backend_internal]}
          ]
}].
</pre>

    <p>
      Same as above but will fall back to the <a
      href="https://github.com/rabbitmq/rabbitmq-auth-backend-http">HTTP backend</a>
      instead:
    </p>

<pre class="lang-ini">
# rabbitmq.conf
#
auth_backends.1 = ldap
# uses module name instead of a short alias, "http"
auth_backends.2 = rabbit_auth_backend_http

# See HTTP backend docs for details
auth_http.user_path = http://my-authenticator-app/auth/user
auth_http.vhost_path = http://my-authenticator-app/auth/vhost
auth_http.resource_path = http://my-authenticator-app/auth/resource
auth_http.topic_path = http://my-authenticator-app/auth/topic
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [rabbit_auth_backend_ldap, rabbit_auth_backend_http]}
          ]
 },
 %% See HTTP backend docs for details
 {rabbitmq_auth_backend_http,
   [{user_path,     "http://my-authenticator-app/auth/user"},
    {vhost_path,    "http://my-authenticator-app/auth/vhost"},
    {resource_path, "http://my-authenticator-app/auth/resource"},
    {topic_path,    "http://my-authenticator-app/auth/topic"}]}].
</pre>

        <p>
          The following example configures RabbitMQ to use the internal
          database for authentication and the <a
          href="https://github.com/gotthardp/rabbitmq-auth-backend-ip-range">source
          IP range backend</a> for authorisation:
        </p>

<pre class="lang-ini">
# rabbitmq.conf
#
auth_backends.1.authn = internal
# uses module name because this backend is from a 3rd party
auth_backends.1.authz = rabbit_auth_backend_ip_range
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [{rabbit_auth_backend_internal, rabbit_auth_backend_ip_range}]}
          ]
}].
</pre>


      <p>
        The following example configures RabbitMQ to use the <a href="/ldap.html">LDAP backend</a>
        for authentication and the internal backend for authorisation:
      </p>

<pre class="lang-ini">
# rabbitmq.conf
#
auth_backends.1.authn = ldap
auth_backends.1.authz = internal
</pre>

        Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [{rabbit_auth_backend_ldap, rabbit_auth_backend_internal}]
          ]}].
</pre>

      <p>
        The example below is fairly advanced. It will check LDAP
        first. If the user is found in LDAP then the password will be
        checked against LDAP and subsequent authorisation checks will
        be performed against the internal database (therefore users in
        LDAP must exist in the internal database as well, but do not
        need a password there). If the user is not found in LDAP then
        a second attempt is made using only the internal database:
      </p>

<pre class="lang-ini">
# rabbitmq.conf
#
auth_backends.1.authn = ldap
auth_backends.1.authz = internal
auth_backends.2       = internal
</pre>

          Or, in the <a href="/configure.html#erlang-term-config-file">classic config format</a>:

<pre class="lang-erlang">
[{rabbit, [
            {auth_backends, [{rabbit_auth_backend_ldap, rabbit_auth_backend_internal},
                             rabbit_auth_backend_internal]}
          ]
}].
</pre>
        </doc:subsection>
      </doc:section>

      <doc:section name="mechanisms">
        <doc:heading>Authentication Mechanisms</doc:heading>

        <p>
          RabbitMQ supports multiple SASL authentication
          mechanisms. There are three such mechanisms built into the
          server: <code>PLAIN</code>, <code>AMQPLAIN</code>,
          and <code>RABBIT-CR-DEMO</code>, and one — <code>EXTERNAL</code> —
          available as a <a href="https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl">plugin</a>.
        </p>
        <p>
          More authentication mechanisms can be provided by plugins. See
          the <a href="plugin-development.html">plugin development
          guide</a> for more information on general plugin
          development.
        </p>
      </doc:section>

      <doc:section name="available-mechanisms">
        <doc:heading>Built-in Authentication Mechanisms</doc:heading>
        <p>
          The built-in mechanisms are:
        </p>

        <table>
          <thead>
            <td>Mechanism</td>
            <td>Description</td>
          </thead>

          <tr>
            <td>PLAIN</td>
            <td>
              SASL PLAIN authentication. This is enabled by default in
              the RabbitMQ server and clients, and is the default for most
              other clients.
            </td>
          </tr>

          <tr>
            <td>AMQPLAIN</td>
            <td>
              Non-standard version of PLAIN retained for backwards compatibility.
              This is enabled by default in the RabbitMQ server.
            </td>
          </tr>

          <tr>
            <td>EXTERNAL</td>
            <td>
              Authentication happens using an out-of-band mechanism
              such as <a href="https://github.com/rabbitmq/rabbitmq-auth-mechanism-ssl">x509 certificate peer verification</a>,
              client IP address range, or similar. Such mechanisms are usually provided by RabbitMQ plugins.
            </td>
          </tr>

          <tr>
            <td>RABBIT-CR-DEMO</td>
            <td>Non-standard mechanism which demonstrates
            challenge-response authentication. This mechanism has
            security equivalent to <code>PLAIN</code>, and
            is <strong>not</strong> enabled by default in the RabbitMQ server.</td>
          </tr>
        </table>
      </doc:section>

      <doc:section name="server-mechanism-configuration">
        <doc:heading>Mechanism Configuration in the Server</doc:heading>
        <p>
          The configuration variable <code>auth_mechanisms</code> in
          the <code>rabbit</code> application determines which of the
          installed mechanisms are offered to connecting clients. This
          variable should be a list of atoms corresponding to
          mechanism names, for example
          <code>['PLAIN', 'AMQPLAIN']</code> by default. The server-side list is not
          considered to be in any particular order. See the
          <a href="configure.html#configuration-file">configuration file</a>
          documentation.
        </p>
      </doc:section>

      <doc:section name="client-mechanism-configuration">
        <doc:heading>Mechanism Configuration in the Client</doc:heading>

        <p>
          Applications must opt-in to use a different authentication mechanism
          such as <code>EXTERNAL</code>.
        </p>

        <doc:subsection name="client-mechanism-configuration-java">
          <doc:heading>Java</doc:heading>
          <p>
            The Java client does not use
            the <code>javax.security.sasl</code> package by default
            since this can be unpredictable on non-Oracle JDKs and is
            missing entirely on Android. There is a RabbitMQ-specific
            SASL implementation, configured by
            the <code>SaslConfig</code> interface. A
            class <code>DefaultSaslConfig</code> is provided to make
            SASL configuration more convenient in the common case. A
            class <code>JDKSaslConfig</code> is provided to act as a
            bridge to <code>javax.security.sasl</code>.
          </p>
          <p>
            <code>ConnectionFactory.getSaslConfig()</code>
            and <code>ConnectionFactory.setSaslConfig(SaslConfig)</code>
            are the primary methods for interacting with authentication mechanisms.
          </p>
        </doc:subsection>

        <doc:subsection name="client-mechanism-configuration-dotnet">
          <doc:heading>.NET</doc:heading>
          <p>
            The .NET client provides its own SASL mechanism
            implementations based on the <code>AuthMechanism</code>
            and <code>AuthMechanismFactory</code>
            interfaces. The <code>ConnectionFactory.AuthMechanisms</code>
            property is a list of authentication mechanism factories in
            preference order.
          </p>
        </doc:subsection>

        <doc:subsection name="client-mechanism-configuration-erlang">
          <doc:heading>Erlang</doc:heading>
          <p>
            The Erlang client provides its own SASL mechanism
            implementations in the <code>amqp_auth_mechanisms</code>
            module. The <code>#amqp_params{}</code> record can be
            provided with a list of authentication functions in
            preference order for network connections.
          </p>
        </doc:subsection>
      </doc:section>

      <doc:section name="troubleshooting-authn">
        <doc:heading>Troubleshooting Authentication</doc:heading>

        <p>
          <a href="/logging.html">Server logs</a> will contain entries about failed authentication
          attempts:

<pre class="lang-ini">
2019-03-25 12:28:19.047 [info] &lt;0.1613.0&gt; accepting AMQP connection &lt;0.1613.0&gt; (127.0.0.1:63839 -&gt; 127.0.0.1:5672)
2019-03-25 12:28:19.056 [error] &lt;0.1613.0&gt; Error on AMQP connection &lt;0.1613.0&gt; (127.0.0.1:63839 -&gt; 127.0.0.1:5672, state: starting):
PLAIN login refused: user 'user2' - invalid credentials
2019-03-25 12:28:22.057 [info] &lt;0.1613.0&gt; closing AMQP connection &lt;0.1613.0&gt; (127.0.0.1:63839 -&gt; 127.0.0.1:5672)
</pre>

          Authentication failures on connections that <a href="#authentication">authenticate using X.509 certificates</a>
          will be logged differently. See <a href="/troubleshooting-ssl.html">TLS Troubleshooting guide</a> for details.
        </p>

        <p>
          <a href="/cli.html">rabbitmqctl authenticate_user</a> can be used to test authentication
          for a username and password pair:

<pre class="lang-bash">
rabbitmqctl authenticate_user 'a-username' 'a/password'
</pre>

          If authentication succeeds, it will exit with
          the code of zero. In case of a failure, a non-zero exit code will be used and a failure error message will be printed.
        </p>

        <p>
          <code>rabbitmqctl authenticate_user</code> will use an CLI-to-node communication connection to attempt to authenticate
          the username/password pair against an internal API endpoint.
          The connection is assumed to be trusted. If that's not the case, its traffic can be <a href="/clustering-ssl.html">encrypted using TLS</a>.
        </p>

        <p>
          Per AMQP 0-9-1 spec, authentication failures should result
          in the server closing TCP connection immediately. However,
          with RabbitMQ clients can opt in to receive a more specific
          notification using the <a href="/auth-notification.html">authentication failure
          notification</a> extension to AMQP 0-9-1. Modern client libraries
          support that extension transparently to the user: no configuration would be necessary and
          authentication failures will result in a visible returned error, exception or other way of communicating
          a problem used in a particular programming language or environment.
        </p>
      </doc:section>

      <doc:section name="troubleshooting-authz">
        <doc:heading>Troubleshooting Authorisation</doc:heading>

        <p>
          <a href="/cli.html">rabbitmqctl list_permissions</a> can be used to inspect a user's
          permission in a given virtual host:

<pre class="lang-bash">
rabbitmqctl list_permissions --vhost /
# => Listing permissions for vhost "/" ...
# => user	configure	write	read
# => user2	.*	.*	.*
# => guest	.*	.*	.*
# => temp-user	.*	.*	.*

rabbitmqctl list_permissions --vhost gw1
# => Listing permissions for vhost "gw1" ...
# => user	configure	write	read
# => guest	.*	.*	.*
# => user2	^user2	^user2	^user2
</pre>
        </p>

        <p>
          <a href="/logging.html">Server logs</a> will contain entries about operation authorization
          failures. For example, if a user does not have any permissions configured for a virtual host:

<pre class="lang-ini">
2019-03-25 12:26:16.301 [info] &lt;0.1594.0&gt; accepting AMQP connection &lt;0.1594.0&gt; (127.0.0.1:63793 -&gt; 127.0.0.1:5672)
2019-03-25 12:26:16.309 [error] &lt;0.1594.0&gt; Error on AMQP connection &lt;0.1594.0&gt; (127.0.0.1:63793 -&gt; 127.0.0.1:5672, user: 'user2', state: opening):
access to vhost '/' refused for user 'user2'
2019-03-25 12:26:16.310 [info] &lt;0.1594.0&gt; closing AMQP connection &lt;0.1594.0&gt; (127.0.0.1:63793 -&gt; 127.0.0.1:5672, vhost: 'none', user: 'user2')
</pre>

          Authorization failures (permission violations) are also logged:

<pre class="lang-ini">
2019-03-25 12:30:05.209 [error] &lt;0.1627.0&gt; Channel error on connection &lt;0.1618.0&gt; (127.0.0.1:63881 -&gt; 127.0.0.1:5672, vhost: 'gw1', user: 'user2'), channel 1:
operation queue.declare caused a channel exception access_refused: access to queue 'user3.q1' in vhost 'gw1' refused for user 'user2'
</pre>
        </p>
      </doc:section>
  </body>
</html>
